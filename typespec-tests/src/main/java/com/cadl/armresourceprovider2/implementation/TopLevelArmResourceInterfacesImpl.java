// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.armresourceprovider2.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.cadl.armresourceprovider2.fluent.TopLevelArmResourceInterfacesClient;
import com.cadl.armresourceprovider2.fluent.models.TopLevelArmResourceInner;
import com.cadl.armresourceprovider2.models.TopLevelArmResource;
import com.cadl.armresourceprovider2.models.TopLevelArmResourceInterfaces;

public final class TopLevelArmResourceInterfacesImpl implements TopLevelArmResourceInterfaces {
    private static final ClientLogger LOGGER = new ClientLogger(TopLevelArmResourceInterfacesImpl.class);

    private final TopLevelArmResourceInterfacesClient innerClient;

    private final com.cadl.armresourceprovider2.ArmResourceProvider2Manager serviceManager;

    public TopLevelArmResourceInterfacesImpl(TopLevelArmResourceInterfacesClient innerClient,
        com.cadl.armresourceprovider2.ArmResourceProvider2Manager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<TopLevelArmResource> getByResourceGroupWithResponse(String resourceGroupName,
        String topLevelArmResourceName, Context context) {
        Response<TopLevelArmResourceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, topLevelArmResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new TopLevelArmResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public TopLevelArmResource getByResourceGroup(String resourceGroupName, String topLevelArmResourceName) {
        TopLevelArmResourceInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, topLevelArmResourceName);
        if (inner != null) {
            return new TopLevelArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public TopLevelArmResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String topLevelArmResourceName = ResourceManagerUtils.getValueFromIdByName(id, "topLevelArmResources");
        if (topLevelArmResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'topLevelArmResources'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, topLevelArmResourceName, Context.NONE).getValue();
    }

    public Response<TopLevelArmResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String topLevelArmResourceName = ResourceManagerUtils.getValueFromIdByName(id, "topLevelArmResources");
        if (topLevelArmResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'topLevelArmResources'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, topLevelArmResourceName, context);
    }

    private TopLevelArmResourceInterfacesClient serviceClient() {
        return this.innerClient;
    }

    private com.cadl.armresourceprovider2.ArmResourceProvider2Manager manager() {
        return this.serviceManager;
    }

    public TopLevelArmResourceImpl define(String name) {
        return new TopLevelArmResourceImpl(name, this.manager());
    }
}
